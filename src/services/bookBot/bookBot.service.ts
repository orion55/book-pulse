import { DescBook } from "../types/books.types";
import { logger } from "../logger.service";
import { Telegraf } from "telegraf";
import fs from "fs";
import colors from "ansi-colors";

export const sendMessage = async (books: DescBook[] | null): Promise<void> => {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const CHAT_ID = process.env.CHAT_ID;

  if (!BOT_TOKEN) {
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
    return;
  }

  if (!CHAT_ID) {
    logger.error("CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω");
    return;
  }

  const bot = new Telegraf(BOT_TOKEN);

  try {
    if (!books || books.length === 0) {
      const currentDate = new Date().toLocaleDateString("ru-RU");
      const message = `*${currentDate}* üìö –ù–æ–≤—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –Ω–µ—Ç üìö \n\n`;
      await bot.telegram.sendMessage(CHAT_ID, message, {
        parse_mode: "Markdown",
      });
      logger.info(
        `–°–æ–æ–±—â–µ–Ω–∏–µ ${colors.green("–ù–æ–≤—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –Ω–µ—Ç")} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`,
      );
      return;
    }

    for (const book of books) {
      const authorsString = book.authors.join(", ");
      const message =
        `*${book.title}*\n\n` +
        `*–ê–≤—Ç–æ—Ä(—ã):* ${authorsString}\n\n` +
        `*–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:*\n${book.annotation}\n\n` +
        `*–°–∫–∞—á–∞—Ç—å:*\n${book.url}\n\n`;

      try {
        const photoStream = fs.createReadStream(book.image);
        await bot.telegram.sendPhoto(CHAT_ID, { source: photoStream });
        logger.info(`–§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ ${colors.green(book.image)} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);

        await bot.telegram.sendMessage(CHAT_ID, message, {
          parse_mode: "Markdown",
        });
        logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ ${colors.green(book.title)} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        try {
          await fs.promises.unlink(book.image);
          logger.info(`–§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ ${colors.green(book.image)} —É–¥–∞–ª–µ–Ω`);
        } catch (unlinkError) {
          logger.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏ ${book.image}:`,
            unlinkError,
          );
        }
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–∏–≥–∏:", error);
      }
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
};
